openapi: 3.0.3
info:
  title: Register and Login (Salty project)
  version: 1.0.11
  description: >-
    This is an API who aims to implement a login/register system with encrypted
    password
  contact:
    email: gwendolinejacobs1@gmail.com
    name: Gwendoline Jacobs - Audrius Grebliunas
    url: https://github.com/AudriusGrebliunas/GetflixProject
externalDocs:
  description: Find out more about our project!
  url: https://github.com/AudriusGrebliunas/GetflixProject
servers:
  - url: localhost
tags:
  - name: user
    description: Operations about user
  - name: movies
    description: All you need to do about movies
  - name: wishlist
    description: >-
      A wishlist of the user allowing him to put movies in three different
      category : want to watch, ongoing, finished.
  - name: ratings
    description: A rating of the user about a movie
paths:
  /user/register.php:
    post:
      tags:
        - user
      summary: Create a new user
      description: Add a user to the database
      operationId: createUser
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully registered
        '401':
          description: Data Missing
        '500':
          description: Internal Server Error
  /user/login.php:
    summary: Log in an existing user
    description: Log in a user by checking his email/password combination
    post:
      summary: Log in an existing user by checking his email/password combination
      description: ''
      operationId: logIn
      requestBody:
        description: Email and password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  description: User's password
      responses:
        '200':
          description: Log in Successfull
        '401':
          description: Email or password missing
        '403':
          description: No Login/Password combinaison found, Are you registered?
      tags:
        - user
  /user/userProfiles.php:
    get:
      tags:
        - user
      summary: Get all users
      description: ''
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
        '404':
          description: Users not found
  /user/userProfile/{email}.php:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: email
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged-in user.
      operationId: deleteUser
      parameters:
        - name: email
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/modifyProfile.php:
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged-in user.
      operationId: updateUser
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User correctly updated!
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
  /movies/add.php:
    post:
      tags:
        - movies
      summary: Create a new movie
      description: Add a movie to the database
      operationId: createMovie
      requestBody:
        description: Created movie object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '200':
          description: Successfully added
        '401':
          description: Data Missing
        '500':
          description: Internal Server Error
  /movies/{movieName}.php:
    get:
      tags:
        - movies
      summary: Get movie by Moviename
      description: ''
      operationId: getMovieByName
      parameters:
        - name: movieName
          in: path
          description: The name that needs to be fetched. Use movie1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid moviename supplied
        '404':
          description: Movie not found
    put:
      tags:
        - movies
      summary: Update movie
      description: This can only be done by the admin.
      operationId: updateMovie
      parameters:
        - name: movieName
          in: path
          description: Name that needs to be updated
          required: true
          schema:
            type: string
        - in: query
          name: body
          description: Updated user object
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
      responses:
        '200':
          description: Movie correctly updated!
        '400':
          description: Invalid movie supplied
        '404':
          description: Movie not found
    delete:
      tags:
        - movies
      summary: Delete movie
      description: This can only be done by the Admin.
      operationId: deleteMovie
      parameters:
        - name: movieName
          in: path
          description: The movie that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid movie supplied
        '404':
          description: Movie not found
  /wishlist/add.php:
    post:
      tags:
        - wishlist
      summary: Add a new item to wishlist
      description: Add a new item on wishlist to the database
      operationId: createWishlist
      requestBody:
        description: Created wishlist object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: integer
                  format: 0, 1, 2, 3
                  description: >-
                    0 for not in the list, 1 for want, 2 for ongoing, 3 for
                    finished
                name:
                  type: string
                  description: name of the movie
                email:
                  type: string
                  description: email of the user
      responses:
        '200':
          description: '{movie} successfully added to your wishlist on {status}'
        '401':
          description: Data Missing
        '402':
          description: User not found
        '404':
          description: Couldn't update, data missing
        '500':
          description: Internal Server Error
  /wishlist/{email}.php:
    get:
      tags:
        - wishlist
      summary: Get wishlist by User
      description: ''
      operationId: getWishlistByUser
      parameters:
        - name: email
          in: path
          description: >-
            The user email that needs to be fetched. Use email@example.com for
            testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the movie
                    status:
                      type: string
                      description: The status on the wishlist
        '400':
          description: Email not found. Do you have any movie in your wishlist?
        '500':
          description: Internal server error
  /wishlist/modifyWishlist.php:
    put:
      tags:
        - wishlist
      summary: Update wishlist
      description: This can only be done by the logged in user.
      operationId: updateWishlist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Wishlist'
      responses:
        '200':
          description: >-
            Wishlist updated ! Your {movie} is correctly added to your
            {wishlist.status}
        '400':
          description: No movie with that user was found in the wishlist
        '404':
          description: Movie not found
  /wishlist/deleteFromWishlist.php:
    delete:
      tags:
        - wishlist
      summary: Update wishlist
      description: This can only be done by the logged-in user.
      operationId: deleteFromWishlist
      parameters:
        - name: name
          in: query
          description: Name of the movie to be removed from the wishlist.
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: Email of the user requesting the deletion.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The {movie} was correctly removed from the wishlist.
        '400':
          description: Invalid movie or email supplied
        '404':
          description: Movie not found
  /rating/add:
    summary: Add, get, update or delete a rating from a user on a movie
    post:
      summary: Add a rating to the database
      description: ''
      operationId: addRating
      requestBody:
        description: Created wishlist object
        required: true
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/Rating'
      responses:
        '200':
          description: Your rating is correctly added.
        '400':
          description: Invalid movie or email supplied
        '500':
          description: Internal server error
      tags:
        - ratings
  /rating/movieRating.php:
    summary: Get a movie rating from the db
    get:
      summary: Get a movie rating from the db
      description: ''
      operationId: movieRating
      parameters:
        - name: email
          in: query
          description: The email of the user who want to rate the movie
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: The name of the movie who is rated
          required: true
          schema:
            type: string
        - name: rating
          in: query
          description: The rating that needs to be added
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        '400':
          description: Invalid movie or email supplied
        '500':
          description: Internal server error
      tags:
        - ratings
components:
  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: example@gmail.com
        address:
          type: string
          example: 27, rue de l'exemple, 5900 exemple
        dob:
          type: integer
          description: Date of Birth
          format: date
          example: '2012-04-23T18:25:43.511Z'
        password:
          type: string
          example: 12345%+de
      xml:
        name: user
    Movie:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Petit Poney
        author:
          type: string
          example: L'Auteur fou
        resume:
          type: string
          example: C'est l'histoire d'un poney
        year:
          type: integer
          example: '2002'
        link_yt:
          type: string
          example: https://www.youtube.com/trailer
        image:
          type: string
          example: https://www.urldemonimage.com/lien
        genre:
          type: string
          example: serious movie
    Wishlist:
      type: object
      properties:
        email:
          type: string
          example: example@example.com
        name:
          type: string
          example: Nom du film
        Status:
          type: integer
          example: 1
    Rating:
      type: object
      properties:
        email:
          type: string
          example: example@example.com
        name:
          type: string
          example: Nom du film
        rating:
          type: number
          example: 4.5
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
